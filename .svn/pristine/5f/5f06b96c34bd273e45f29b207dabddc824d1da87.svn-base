using System;
using System.Drawing;
using System.Diagnostics;
using System.Drawing.Imaging;
using OCRRestService;
using System.Collections.Generic;

public class ImageParser
{
	public String Parse()
	{
        double scalefactor = 4.8;
        Bitmap b = new Bitmap("C:/Users/Michael/Desktop/Clipboard05.png");
        Color bgcolor = Color.FromArgb(182, 209, 146);
        int startingx = 0;
        Rectangle[] r = new Rectangle[5];
        int columns = 5;
        for (int i = 0; i < columns; i++)
        {
            for (int y = 0; y < b.Height; y+=10)
            {
                for (int x = startingx; x < b.Width; x += 10)
                {
                    Color col = b.GetPixel(x, y);
                   
                    if (col == bgcolor)
                    {
                        
                        r[i] = getRect(b, x, y);
                        if ((r[i].X) - r[Math.Max(i - 1, 0)].X > 75 + r[i].Width)
                        {
                            columns--;
                        }
                        goto breakout;

                    }
                }
            }
            columns--;
        breakout:
            startingx = r[i].Right + 10 ;
        
        }
        String s = "";
        for (int i = 0; i < columns; i++)
        {
            Bitmap r1 = new Bitmap((int)(r[i].Width * scalefactor), (int)(b.Height * scalefactor));
            using (Graphics g = Graphics.FromImage((Image)r1))
                g.DrawImage(b, new Rectangle(0, 0, (int)(r[i].Width * scalefactor), (int)(b.Height * scalefactor)), new Rectangle(new Point(r[i].Location.X, 0), new Size(r[i].Width, b.Height)), GraphicsUnit.Pixel);
            r1.Save("C:/Users/Michael/Desktop/" + i + ".png", ImageFormat.Png);
            r1.Dispose();
            Process p = new Process();
            p.StartInfo.WorkingDirectory = "C:/Users/Michael/Desktop/";
            p.StartInfo.FileName = "C:/Program Files (x86)/Tesseract-OCR/tesseract.exe";
            p.StartInfo.Arguments = i + ".png outputtext" + i;
            p.Start();
            p.WaitForExit();
            System.IO.StreamReader sr = new System.IO.StreamReader("C:/Users/Michael/Desktop/outputtext" + i + ".txt");
            s += "\n" + sr.ReadToEnd();
            sr.Close();
        }
        s = s.Replace("I-I", "H");
        s = s.Replace("IIATH", "MATH");
        s = s.Replace("HATH", "MATH");
        s = s.Replace("HAT\"", "MATH");
        s = s.Replace("9\"", "PM");
        s = s.Replace("\"", "M");
        s = s.Replace("I-l", "H");
        s = s.Replace("$", "5");
        s = s.Replace("OO1", "001");
        s = s.Replace("O01", "001");
        s = s.Replace("'l'", "T");
        s = s.Replace("'l’", "T");
        s = s.Replace("‘l'", "T");
        s = s.Replace("‘l’", "T");
        s = s.Replace("—", "-");
        s = s.Replace("Colltts", "Coutts");
        s = s.Replace("l'l", "H");
        s = s.Replace("l'I", "H");
        s = s.Replace("\\N", "W");
        s = s.Replace("0AH", "0AM");
        for (int i = 0; i < 10; i++) { s = s.Replace("Z" + i, "2" + i); }
        
        b.Dispose();
       
        return getJSON(s);
        
	}

    private String getJSON(String s)
    {
        List<SampleItem> SampleResultList = new List<SampleItem>();
        String[] lines = s.Split(new String[] {"\n"}, StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0; i < lines.Length; i++)
        {
            // creating a sampleitem at a time and pushing them into a list

            SampleItem SampleItem = new SampleItem();
            SampleItem.CourseName = "Course No.: " + i.ToString();
            SampleItem.CourseProf = "CourseProf No.: " + i.ToString();
            SampleItem.CourseLocation = "CourseLocation No.: " + i.ToString();
            SampleItem.CourseTime = new List<string>();

            for (int j = 0; j < i; j++)
            {
                SampleItem.CourseTime.Add("DateTime: " + i.ToString() + " " + j.ToString());
            }

            SampleResultList.Add(SampleItem);
        }

        JsonOutput JsonOutput = new JsonOutput();

        string JsonResult = JsonOutput.ParseToJson(SampleResultList);

        return JsonResult;
    }

    private Rectangle getRect(Bitmap b, int x, int y)
    {
        int x1 = x; int y1 = y;
        Color c = Color.FromArgb(255, 255, 255, 255);
        Color c2 = Color.FromArgb(255, 95, 154, 35);
        Color cCurrent = Color.FromArgb(0, 0, 0, 0);
        while (cCurrent != c2 && cCurrent != c) { cCurrent = b.GetPixel(--x1, y1); }
        int left = x1;
        x1 = x; y1 = y;
        cCurrent = Color.FromArgb(0, 0, 0, 0);
        while (cCurrent != c2 && cCurrent != c) { cCurrent = b.GetPixel(x1, --y1); }
        int top = y1;
        x1 = x; y1 = y;
        cCurrent = Color.FromArgb(0, 0, 0, 0);
        while (cCurrent != c2 && cCurrent != c) { cCurrent = b.GetPixel(++x1, y1); }
        int right = x1;
        x1 = x; y1 = y;
        cCurrent = Color.FromArgb(0, 0, 0, 0);
        while (cCurrent != c2 && cCurrent != c) { cCurrent = b.GetPixel(x1, ++y1); }
        int bottom = y1;
        return new Rectangle(left, top, right - left, bottom - top);
    }
}
